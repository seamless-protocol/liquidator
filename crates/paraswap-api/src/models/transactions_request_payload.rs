/*
 * ParaSwap API v5
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@paraswap.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct TransactionsRequestPayload {
    /// Source Token Address. Only Token Symbol could be speciﬁed for tokens from `/tokens`.
    #[serde(rename = "srcToken")]
    pub src_token: String,
    /// Source Token Decimals; can be omitted if Symbol is provided for `srcToken`.
    #[serde(rename = "srcDecimals", skip_serializing_if = "Option::is_none")]
    pub src_decimals: Option<i32>,
    /// Destination Token Address. Only Token Symbol could be speciﬁed for tokens from `/tokens`.
    #[serde(rename = "destToken")]
    pub dest_token: String,
    /// Destination Token Decimals; can be omitted if Symbol is provided for `destToken`.
    #[serde(rename = "destDecimals", skip_serializing_if = "Option::is_none")]
    pub dest_decimals: Option<i32>,
    /// Amount in the Denomination of `srcToken` as returned from the `/prices` end-point. Required if `side=SELL`. Could only be ommitted if slippage & destAmount is provided when `side=BUY`
    #[serde(rename = "srcAmount", skip_serializing_if = "Option::is_none")]
    pub src_amount: Option<String>,
    /// Amount in the Denomination of `destToken`  as returned from the `/prices` end-point.Required if `side=SELL`. Could only be ommitted if slippage & srcAmount is provided when `side=SELL`
    #[serde(rename = "destAmount", skip_serializing_if = "Option::is_none")]
    pub dest_amount: Option<String>,
    /// Slippage percentage (represented in basis points). Eg: for 2.5% slippage, set the value to 0.025 * 10000 = 250; for 10% = 1000. <b>slippage</b> could be passed instead of `destAmount` when `side=SELL` or `srcAmount` when `side=BUY`
    #[serde(rename = "slippage", skip_serializing_if = "Option::is_none")]
    pub slippage: Option<i32>,
    /// Address of the Signer
    #[serde(rename = "userAddress")]
    pub user_address: String,
    /// Whenever msg.sender (userAddress) is different than the address calling the paraswap contract, `txOrigin` must be passed along with `userAddress`.
    #[serde(rename = "txOrigin", skip_serializing_if = "Option::is_none")]
    pub tx_origin: Option<String>,
    /// Address of the Receiver.
    #[serde(rename = "receiver", skip_serializing_if = "Option::is_none")]
    pub receiver: Option<String>,
    /// Partner Address. If provided takes precedence over `partner`
    #[serde(rename = "partnerAddress", skip_serializing_if = "Option::is_none")]
    pub partner_address: Option<String>,
    /// Used together with `partner` if provided. Should be parsed in Basis Points. Look at `slippage` parameter description to understand better.
    #[serde(rename = "partnerFeePercent", skip_serializing_if = "Option::is_none")]
    pub partner_fee_percent: Option<i32>,
    /// Partner string. If `partnerAddress` not provided, partnerFeePercent is matched against known partners
    #[serde(rename = "partner", skip_serializing_if = "Option::is_none")]
    pub partner: Option<String>,
    /// Permit-hash (hex-string) to omit approving the user before swap. Helps in saving gas.
    #[serde(rename = "permit", skip_serializing_if = "Option::is_none")]
    pub permit: Option<String>,
    /// Timestamp (10 digit/seconds precision) till when the given transaction is valid. Eg: 1629214486. For a 5 minute, `deadline` could be calculated as `Date.now()/1000 + 300.`
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<i32>,
    #[serde(rename = "priceRoute")]
    pub price_route: serde_json::Value,
    // Parse price route as raw json to ensure it is not modified between api calls
    // pub price_route: Box<crate::models::PriceRoute>,
}

impl TransactionsRequestPayload {
    pub fn new(src_token: String, dest_token: String, user_address: String, price_route: serde_json::Value) -> TransactionsRequestPayload {
        TransactionsRequestPayload {
            src_token,
            src_decimals: None,
            dest_token,
            dest_decimals: None,
            src_amount: None,
            dest_amount: None,
            slippage: None,
            user_address,
            tx_origin: None,
            receiver: None,
            partner_address: None,
            partner_fee_percent: None,
            partner: None,
            permit: None,
            deadline: None,
            price_route: price_route,
        }
    }
}


