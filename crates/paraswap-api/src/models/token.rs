/*
 * ParaSwap API v5
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@paraswap.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Token {
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "decimals")]
    pub decimals: i32,
    #[serde(rename = "img")]
    pub img: String,
    #[serde(rename = "network")]
    pub network: i32,
    #[serde(rename = "newToken")]
    pub new_token: bool,
    #[serde(rename = "connectors")]
    pub connectors: Vec<String>,
    #[serde(rename = "tokenType")]
    pub token_type: TokenType,
}

impl Token {
    pub fn new(symbol: String, address: String, decimals: i32, img: String, network: i32, new_token: bool, connectors: Vec<String>, token_type: TokenType) -> Token {
        Token {
            symbol,
            address,
            name: None,
            decimals,
            img,
            network,
            new_token,
            connectors,
            token_type,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TokenType {
    #[serde(rename = "ETH")]
    Eth,
    #[serde(rename = "ERC20")]
    Erc20,
    #[serde(rename = "SYNTH")]
    Synth,
    #[serde(rename = "cToken")]
    CToken,
    #[serde(rename = "iToken")]
    IToken,
    #[serde(rename = "aToken")]
    AToken,
    #[serde(rename = "aToken2")]
    AToken2,
    #[serde(rename = "idleToken")]
    IdleToken,
    #[serde(rename = "Chai")]
    Chai,
    #[serde(rename = "bDAI")]
    BDai,
}

impl Default for TokenType {
    fn default() -> TokenType {
        Self::Eth
    }
}

